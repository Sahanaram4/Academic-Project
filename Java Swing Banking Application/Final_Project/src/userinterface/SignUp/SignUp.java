/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SignUp;

import Business.Enterprise.Enterprise;
import Business.NewUser.NewUser;
import Business.Organization.BankEmployeeOrganization;
import Business.WorkQueue.NewCustomerWorkRequest;
import Business.WorkQueue.WorkRequest;
import UserInterface.MainJFrame;
import java.awt.CardLayout;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;

/**
 *
 * @author Sumeet
 */
public class SignUp extends javax.swing.JPanel {

    private static final String SELECT_COUNTRY_INDICATOR = "Select Country";

    private JPanel userProcessContainer = null;
    private final Map<String, Set<String>> countryStateMapping = new HashMap<>();
    private static final String COUNTRY_STATE_MAPPING_PATH = "conf/country";

    private Enterprise enterprise;

    private BankEmployeeOrganization organization;

    private String filePath = null;

    public SignUp(JPanel userProcessContainer, Enterprise enterprise, BankEmployeeOrganization bankManagerOrganization) {
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.organization = bankManagerOrganization;
        initComponents();
        populateCountryStateMapping();

    }

    private void populateCountryStateMapping() {
        File countryDir = new File(COUNTRY_STATE_MAPPING_PATH);
        if (!countryDir.isDirectory()) {
            throw new RuntimeException("Country state mapping directory does not exist at location [" + COUNTRY_STATE_MAPPING_PATH + "]");
        }

        countryComboBox.addItem(SELECT_COUNTRY_INDICATOR);
        stateComboBox.removeAllItems();

        for (File countryFile : countryDir.listFiles()) {
            String countryName = countryFile.getName();
            Set<String> states = readStates(countryFile);
            countryStateMapping.put(countryName, states);
            countryComboBox.addItem(countryName);
        }

    }

    private Set<String> readStates(File countryFile) {
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(countryFile));
            String state = null;
            Set<String> list = new TreeSet<>();
            while ((state = reader.readLine()) != null) {
                list.add(state);
            }

            return list;
        } catch (IOException e) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, e);
        } finally {
            try {
                reader.close();
            } catch (IOException ex) {
                Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        stateComboBox = new javax.swing.JComboBox<>();
        countryComboBox = new javax.swing.JComboBox<>();
        txtFirstName = new javax.swing.JTextField();
        txtZip = new javax.swing.JTextField();
        txtStreet = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        txtHouseNumber = new javax.swing.JTextField();
        txtMobile = new javax.swing.JTextField();
        btnRequest = new javax.swing.JButton();
        txtSSN = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        fileBrowseButton = new javax.swing.JButton();
        selectedFileLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        backgroundLabel = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel1.setText("First Name");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 100, 35));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setText("Last Name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 70, 110, 35));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setText("Street");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, 80, 35));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setText("House Number");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 130, 120, 35));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setText("City");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 190, 60, 35));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setText("State");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 250, 60, 35));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setText("Country");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 80, 35));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel8.setText("Zip Code");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, 80, 35));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setText("Email");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 370, 60, 35));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel11.setText("Mobile Number");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 310, 130, 35));

        add(stateComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 250, 180, 35));

        countryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryComboBoxActionPerformed(evt);
            }
        });
        add(countryComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 250, 180, 35));
        add(txtFirstName, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 180, 35));
        add(txtZip, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 190, 180, 35));
        add(txtStreet, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 120, 180, 35));
        add(txtEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 370, 180, 35));
        add(txtCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 190, 180, 35));
        add(txtLastName, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 70, 180, 35));
        add(txtHouseNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 130, 180, 35));
        add(txtMobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 310, 180, 35));

        btnRequest.setBackground(new java.awt.Color(255, 255, 255));
        btnRequest.setForeground(new java.awt.Color(51, 51, 51));
        btnRequest.setText("Request New Account");
        btnRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestActionPerformed(evt);
            }
        });
        add(btnRequest, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 480, -1, 30));
        add(txtSSN, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 310, 180, 35));

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel14.setText("SSN");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, -1, -1));

        fileBrowseButton.setBackground(new java.awt.Color(255, 255, 255));
        fileBrowseButton.setText("Attach ID Proof");
        fileBrowseButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fileBrowseButtonMouseEntered(evt);
            }
        });
        fileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileBrowseButtonActionPerformed(evt);
            }
        });
        add(fileBrowseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 380, 150, -1));

        selectedFileLabel.setBackground(new java.awt.Color(255, 255, 255));
        selectedFileLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        selectedFileLabel.setEnabled(false);
        add(selectedFileLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 370, 240, 40));

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("( 9 digits )");
        jLabel12.setEnabled(false);
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 320, -1, -1));

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("( example@mail.com )");
        jLabel15.setEnabled(false);
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 380, -1, -1));

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("( 10 digits )");
        jLabel16.setEnabled(false);
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 320, -1, -1));

        jLabel18.setBackground(new java.awt.Color(255, 255, 255));
        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel18.setText("New Account Request Page");
        add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, -1, -1));

        backgroundLabel.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        backgroundLabel.setIcon(new javax.swing.ImageIcon("C:\\Users\\Sumeet\\Desktop\\Assignments\\AED Assignments\\Final\\9.jpg")); // NOI18N
        add(backgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void countryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryComboBoxActionPerformed
        if (null == countryComboBox.getSelectedItem()
                || ((String) countryComboBox.getSelectedItem()).isEmpty()
                || countryComboBox.getSelectedItem().equals(SELECT_COUNTRY_INDICATOR)) {
            stateComboBox.removeAllItems();
            return;
        }

        String countryName = (String) countryComboBox.getSelectedItem();
        Set<String> states = countryStateMapping.get(countryName);
        stateComboBox.removeAllItems();
        for (String state : states) {
            stateComboBox.addItem(state);
        }
    }//GEN-LAST:event_countryComboBoxActionPerformed

    private void btnRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestActionPerformed

        if (!isValidDetails() || !isUniqueUser()) {
            return;
        }

        NewUser newUser = new NewUser();
        newUser.setFirstName(txtFirstName.getText().trim());
        newUser.setLastName(txtLastName.getText().trim());
        newUser.setEmail(txtEmail.getText().trim());
        newUser.setCity(txtCity.getText().trim());
        newUser.setState(stateComboBox.getSelectedItem().toString().trim());
        newUser.setCountry(countryComboBox.getSelectedItem().toString().trim());
        newUser.setZipCode(Integer.parseInt(txtZip.getText().trim()));
        newUser.setMobile(Long.parseLong(txtMobile.getText().trim()));
        newUser.setBuildingNo(txtHouseNumber.getText().trim());
        newUser.setStreetName(txtStreet.getText().trim());
        newUser.setSSN(txtSSN.getText().trim());
        newUser.setFilePath(filePath);

        NewCustomerWorkRequest request = new NewCustomerWorkRequest(newUser);
        request.setStatus(NewCustomerWorkRequest.NewCustomerRequestStatus.NEW_REQUEST);
        organization.getWorkQueue().getWorkRequestList().add(request);
        copyAttacedDocument();

        freezeScreen();
        MainJFrame.saveData();
        
        JOptionPane.showMessageDialog(this, "We value our customers, your request is under process",
                "THANK YOU!!!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnRequestActionPerformed

    private boolean isUniqueUser() {
        List<WorkRequest> workRequestList = organization.getWorkQueue().getWorkRequestList();
        for (WorkRequest request : workRequestList) {
            NewCustomerWorkRequest userRequest = (NewCustomerWorkRequest) request;
            if (userRequest.getNewUserInfo().getSSN().equals(txtSSN.getText().trim())) {
                JOptionPane.showMessageDialog(this, "User with same SSN number already exists.", "Duplicate user", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }

    private void freezeScreen() {
        txtFirstName.setEnabled(false);
        txtLastName.setEnabled(false);
        txtMobile.setEnabled(false);
        txtEmail.setEnabled(false);
        txtSSN.setEnabled(false);
        txtStreet.setEnabled(false);
        txtHouseNumber.setEnabled(false);
        txtCity.setEnabled(false);
        txtZip.setEnabled(false);
        stateComboBox.setEnabled(false);
        countryComboBox.setEnabled(false);
        fileBrowseButton.setEnabled(false);
        btnRequest.setEnabled(false);
    }

    private boolean isValidDetails() {
        String fname = txtFirstName.getText().trim();
        String lname = txtLastName.getText().trim();
        String phone = txtMobile.getText().trim();
        String email = txtEmail.getText().trim();
        String ssn = txtSSN.getText().trim();
        String street = txtStreet.getText().trim();
        String houseNumber = txtHouseNumber.getText().trim();
        String city = txtCity.getText().trim();
        String zip = txtZip.getText().trim();
        String state = (String) stateComboBox.getSelectedItem();
        String country = (String) countryComboBox.getSelectedItem();
        String documentPath = filePath;

        if (fname.isEmpty()
                || lname.isEmpty() || phone.isEmpty() || email.isEmpty() || ssn.isEmpty() || street.isEmpty()
                || houseNumber.isEmpty() || city.isEmpty() || zip.isEmpty() || state.isEmpty() || country.isEmpty()
                || documentPath.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Fields cannot be empty", "Empty fields", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!fname.matches("[a-zA-Z]+") || !lname.matches("[a-zA-Z]+")) {
            JOptionPane.showMessageDialog(this, "Please enter valid name", "Invalid Name", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!houseNumber.matches("\\w+")) {
            JOptionPane.showMessageDialog(this, "Please enter alphanumeric value", "Invalid house number", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!zip.matches("\\d+{5,6}")) {
            JOptionPane.showMessageDialog(this, "Please enter 5-6 digit numeric value", "Invalid zipcode", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!city.matches("[a-zA-Z]+")) {
            JOptionPane.showMessageDialog(this, "Please enter valid name", "Invalid city", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!ssn.matches("\\d{9}")) {
            JOptionPane.showMessageDialog(this, "Please enter correct SSN number", "Invalid SSN", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!phone.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(this, "Please enter valid phone address", "Invalid phone address", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        if (!isValidateEmailId(email)) {
            JOptionPane.showMessageDialog(this, "Please enter valid email address", "Invalid email address", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    private static boolean isValidateEmailId(String email) {
        if (email.contains("..")) {
            return false;
        }

        Pattern pattern = Pattern.compile("@.*@");
        Matcher matcher = pattern.matcher(email);
        if (matcher.find()) {
            return false;
        }

        return email.matches("\\w+@\\w+\\.\\w[\\w.]*\\w");

    }

    private void fileBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileBrowseButtonActionPerformed
        JFileChooser c = new JFileChooser();
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            this.filePath = c.getSelectedFile().getPath();
            this.selectedFileLabel.setText(filePath);
            //dir.setText(c.getCurrentDirectory().toString());
            System.out.println("File oath ::: " + c.getSelectedFile().getPath());

        }
    }//GEN-LAST:event_fileBrowseButtonActionPerformed

    private void fileBrowseButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileBrowseButtonMouseEntered
        // TODO add your handling code here:
        fileBrowseButton.setToolTipText("Clear copy of Passport/DL/Photo Id");
    }//GEN-LAST:event_fileBrowseButtonMouseEntered


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backgroundLabel;
    private javax.swing.JButton btnRequest;
    private javax.swing.JComboBox<String> countryComboBox;
    private javax.swing.JButton fileBrowseButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel selectedFileLabel;
    private javax.swing.JComboBox<String> stateComboBox;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtHouseNumber;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMobile;
    private javax.swing.JTextField txtSSN;
    private javax.swing.JTextField txtStreet;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables

    private void copyAttacedDocument() {
        File source = new File(filePath);
        File target = new File("C:\\Users\\Sumeet\\Desktop\\Assignments\\AED Assignments\\Final\\database\\documents\\" + source.getName());
        if (target.exists()) {
            target.delete();
        }

        InputStream input = null;
        OutputStream output = null;
        try {

            input = new FileInputStream(source);
            output = new FileOutputStream(target);

            byte[] buf = new byte[1024];
            int bytesRead;

            while ((bytesRead = input.read(buf)) > 0) {
                output.write(buf, 0, bytesRead);
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                input.close();
                output.close();
            } catch (IOException ex) {
                Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

}
