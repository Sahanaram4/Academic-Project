/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Role.BankManager;
import Business.UserAccount.UserAccount;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sumeet
 */
public class ManageEnterpriseManagerJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;

    /**
     * Creates new form ManageEnterpriseJPanel
     */
    public ManageEnterpriseManagerJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();

        //this.setSize(1020,720);
        this.userProcessContainer = userProcessContainer;
        this.system = system;

        populateTable();
        populateNetworkComboBox();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseJTable.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[3];
                    row[0] = enterprise.getName();
                    row[1] = network.getName();
                    row[2] = userAccount.getUsername();

                    model.addRow(row);
                }
            }
        }
    }

    private void populateNetworkComboBox() {
        networkJComboBox.removeAllItems();

        for (Network network : system.getNetworkList()) {
            networkJComboBox.addItem(network);
        }
    }

    private void populateEnterpriseComboBox(Network network) {
        enterpriseJComboBox.removeAllItems();

        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            enterpriseJComboBox.addItem(enterprise);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        networkJComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        usernameJTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        enterpriseJComboBox = new javax.swing.JComboBox();
        submitJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        phoneJTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        passwordJPasswordField = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        txtemail = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtaddress = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtSSN = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setLayout(null);

        enterpriseJTable.setBorder(new javax.swing.border.MatteBorder(null));
        enterpriseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enterprise Name", "Network", "Username"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        enterpriseJTable.setGridColor(new java.awt.Color(51, 51, 51));
        enterpriseJTable.setSelectionBackground(new java.awt.Color(204, 255, 153));
        jScrollPane1.setViewportView(enterpriseJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(70, 80, 570, 95);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Network");
        add(jLabel1);
        jLabel1.setBounds(88, 201, 59, 20);

        networkJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        networkJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkJComboBoxActionPerformed(evt);
            }
        });
        add(networkJComboBox);
        networkJComboBox.setBounds(211, 198, 136, 26);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Username");
        add(jLabel2);
        jLabel2.setBounds(400, 310, 71, 20);
        add(usernameJTextField);
        usernameJTextField.setBounds(500, 310, 140, 26);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Enterprise");
        add(jLabel3);
        jLabel3.setBounds(90, 250, 71, 20);

        enterpriseJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(enterpriseJComboBox);
        enterpriseJComboBox.setBounds(210, 250, 136, 26);

        submitJButton.setBackground(new java.awt.Color(255, 255, 255));
        submitJButton.setText("Create");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton);
        submitJButton.setBounds(530, 400, 80, 29);

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Password");
        add(jLabel4);
        jLabel4.setBounds(400, 350, 67, 20);
        add(phoneJTextField);
        phoneJTextField.setBounds(210, 390, 136, 26);

        jLabel5.setText("Phone");
        add(jLabel5);
        jLabel5.setBounds(110, 390, 50, 20);
        add(passwordJPasswordField);
        passwordJPasswordField.setBounds(500, 350, 140, 26);

        jLabel7.setText("Name");
        add(jLabel7);
        jLabel7.setBounds(110, 310, 41, 20);
        add(nameJTextField);
        nameJTextField.setBounds(210, 310, 136, 26);
        add(txtemail);
        txtemail.setBounds(210, 430, 136, 26);

        jLabel8.setText("Email");
        add(jLabel8);
        jLabel8.setBounds(110, 430, 50, 20);
        add(txtaddress);
        txtaddress.setBounds(210, 350, 136, 26);

        jLabel10.setText("Address");
        add(jLabel10);
        jLabel10.setBounds(100, 350, 80, 20);
        add(txtSSN);
        txtSSN.setBounds(210, 470, 136, 26);

        jLabel11.setText("SSN");
        add(jLabel11);
        jLabel11.setBounds(120, 470, 50, 20);

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("( 9 digits )");
        jLabel12.setEnabled(false);
        add(jLabel12);
        jLabel12.setBounds(350, 470, 61, 17);

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("( example@mail.com )");
        jLabel13.setEnabled(false);
        add(jLabel13);
        jLabel13.setBounds(350, 430, 136, 17);

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("( 10 digits )");
        jLabel14.setEnabled(false);
        add(jLabel14);
        jLabel14.setBounds(350, 390, 80, 17);

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel16.setText("Manage Enterprise");
        add(jLabel16);
        jLabel16.setBounds(270, 30, 160, 20);

        jLabel6.setIcon(new javax.swing.ImageIcon("C:\\Users\\Sumeet\\Desktop\\Assignments\\AED Assignments\\Final\\9.jpg")); // NOI18N
        jLabel6.setText("jLabel6");
        add(jLabel6);
        jLabel6.setBounds(-10, -200, 2615, 1600);
    }// </editor-fold>//GEN-END:initComponents

    private void networkJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkJComboBoxActionPerformed

        Network network = (Network) networkJComboBox.getSelectedItem();
        if (network != null) {
            populateEnterpriseComboBox(network);
        }


    }//GEN-LAST:event_networkJComboBoxActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

        String name = nameJTextField.getText().trim();
        String phone = phoneJTextField.getText().trim();
        String email = txtemail.getText().trim();
        String ssn = txtSSN.getText().trim();
        String add = txtaddress.getText().trim();
        String userName = usernameJTextField.getText().trim();
        final char[] passwordChars = passwordJPasswordField.getPassword();
        String password = null;
        if (null == passwordChars || passwordChars.length == 0) {
            password = "";
        } else {
            password
                    = new String(passwordChars);
        }

        if (name.isEmpty()
                || ssn.isEmpty()
                || email.isEmpty()
                || phone.isEmpty()
                || add.isEmpty()
                || userName.isEmpty()
                || password.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Fields cannot be empty");
            return;
        }

        if (!name.matches("[a-zA-Z]+")) {
            JOptionPane.showMessageDialog(this, "Please enter valid name", "Invalid Name", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (add.length() < 5) {
            JOptionPane.showMessageDialog(this, "Please enter valid address", "Address too short", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!phone.matches("\\d{10}")) {
            JOptionPane.showMessageDialog(this, "Please enter valid phone address", "Invalid phone address", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!isValidateEmailId(email)) {
            JOptionPane.showMessageDialog(this, "Please enter valid email address", "Invalid email address", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!ssn.matches("\\d{9}")) {
            JOptionPane.showMessageDialog(this, "Please enter correct SSN number", "Invalid SSN", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (password.contains(" ") || password.length() < 4) {
            JOptionPane.showMessageDialog(this, "Password too weak", "Password invalid", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!isValidUserName(userName)) {
            JOptionPane.showMessageDialog(this, "Please choose some other username", "Username already exists", JOptionPane.ERROR_MESSAGE);
            return;
        }

        Enterprise enterprise = (Enterprise) enterpriseJComboBox.getSelectedItem();

        Employee employee = new Employee();
        employee.setName(nameJTextField.getText());
        employee.setPhone(phoneJTextField.getText());
        employee.setAddress(txtaddress.getText());
        employee.setDOJ(dateFormatter.format(new Date()));
        employee.setEmail(txtemail.getText());
        employee.setSsn(txtSSN.getText());

        enterprise.getEmployeeDirectory().addEmployee(employee);

        enterprise.getUserAccountDirectory().createUserAccount(userName, password, employee, new BankManager());
        populateTable();
        emptyFields();
        JOptionPane.showMessageDialog(this, "Employee created successfiully", "Success!", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_submitJButtonActionPerformed

    private void emptyFields() {
        nameJTextField.setText("");
        phoneJTextField.setText("");
        txtaddress.setText("");
        txtemail.setText("");
        txtSSN.setText("");
        usernameJTextField.setText("");
        passwordJPasswordField.setText("");
    }

    private boolean isValidUserName(String userName) {

        //Step1: Check in the system user account directory if you have the user
        ArrayList<UserAccount> userAccountList = system.getUserAccountDirectory().getUserAccountList();

        for (UserAccount account : userAccountList) {
            if (account.getUsername().equalsIgnoreCase(userName)) {
                return false;
            }
        }

        for (Network network : system.getNetworkList()) {
            //Step 2-a: Check against each enterprise
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                userAccountList = enterprise.getUserAccountDirectory().getUserAccountList();

                for (UserAccount account : userAccountList) {
                    if (account.getUsername().equalsIgnoreCase(userName)) {
                        return false;
                    }
                }
                //Step3: Check against each organization inside that enterprise
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    userAccountList = organization.getUserAccountDirectory().getUserAccountList();
                    for (UserAccount account : userAccountList) {
                        if (account.getUsername().equalsIgnoreCase(userName)) {
                            return false;
                        }
                    }
                }
            }
        }

        return true;
    }

    private static boolean isValidateEmailId(String email) {
        if (email.contains("..")) {
            return false;
        }

        Pattern pattern = Pattern.compile("@.*@");
        Matcher matcher = pattern.matcher(email);
        if (matcher.find()) {
            return false;
        }
        return email.matches("\\w+@\\w+\\.\\w[\\w.]*\\w");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox enterpriseJComboBox;
    private javax.swing.JTable enterpriseJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JComboBox networkJComboBox;
    private javax.swing.JPasswordField passwordJPasswordField;
    private javax.swing.JTextField phoneJTextField;
    private javax.swing.JButton submitJButton;
    private javax.swing.JTextField txtSSN;
    private javax.swing.JTextField txtaddress;
    private javax.swing.JTextField txtemail;
    private javax.swing.JTextField usernameJTextField;
    // End of variables declaration//GEN-END:variables
    private DateFormat dateFormatter = new SimpleDateFormat("MM/dd/yyyy");
}
